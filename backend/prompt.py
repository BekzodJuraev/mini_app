import openai
import base64

from config import KEY,MODEL
openai.api_key = KEY
import json
def get_health_scale(height, weight, smoking_now, smoking_past, location, gender, date_birth, exp_smoke,smoke_what,smoke_day):
    user_input = f"""
    Рост: {height}
    Вес: {weight}
    Пол: {gender}
    Дата рождения: {date_birth}
    Курите ли вы сейчас: {smoking_now}
    Курили ли вы раньше: {smoking_past}
    Стаж курения: {exp_smoke}
    Место проживания: {location}
    Что курите:{smoke_what}
    Количество сигарет в день:{smoke_day}

    Оцени состояние по шкале от 1 до 10 для следующих категорий, добавляя общий показатель для каждой группы:

    - Общий тонус (Overall tone)
    - Дыхательная система (Respiratory System)
      - Общий показатель
      - Легкие (Lungs)
      - Трахея (Trachea)
      - Носоглотка (Nasopharynx)
      - Бронхи (Bronchi)
      - Рёбра (Ribs)
      - Диафрагма (Diaphragm)
    - Сердечно-сосудистая система (Cardiovascular System)
      - Общий показатель
      - Пульс (Pulse)
      - Систолическое давление (Systolic Pressure)
      - Диастолическое давление (Diastolic Pressure)
    - Опорно-двигательная система (Skeletal Muscle System)
      - Общий показатель
      - Скелет (Skeleton)
      - Мышцы (Muscles)
      - Защита (Protection)
      - Гибкость суставов (Joint Flexibility)
      - Амортизация (Shock Absorption)
      - Позвоночник (Spine)
    - Эндокринная система (Endocrine System)
      - Общий показатель
      - Щитовидная железа (Thyroid Gland)
      - Шишковидная железа (Pineal Gland)
      - Надпочечники (Adrenal Glands)
      - Поджелудочная железа (Pancreas)
      - Вилочковая железа (Thymus)
      - Половые железы (Sex Glands)
    - Иммунная система (Immune System) - Общий показатель
    - Пищеварительная система (Digestive System)
      - Общий показатель
      - Пищевод (Esophagus)
      - Печень (Liver)
      - Желудок (Stomach)
      - Толстый кишечник (Large Intestine)
      - Тонкий кишечник (Small Intestine)
      - Ротовая полость (Oral Cavity)
    - Выделительная система (Excretory System) - Общий показатель
    - Слух, зрение, вкус - Общий показатель
    - Кроветворение и обмен (Hematopoietic Metabolic System) - Общий показатель
    - Психика - Общий показатель

    Ответ должен быть ТОЛЬКО в формате JSON, например:
    {{
        "Общий тонус": 7,
        "Система дыхания": {{
            "Общий показатель": 6,
            "Легкие": 5,
            "Трахея": 6,
            "Носоглотка": 7,
            "Бронхи": 6,
            "Рёбра": 7,
            "Диафрагма": 6
        }},
        "Сердце и сосуды": {{
            "Общий показатель": 7,
            "Пульс": 7,
            "Систолическое давление": 6,
            "Диастолическое давление": 7
        }},
        "Скелет и мышцы": {{
            "Общий показатель": 8,
            "Скелет": 8,
            "Мышцы": 7,
            "Защита": 7,
            "Гибкость суставов": 8,
            "Амортизация": 7,
            "Позвоночник": 8
        }},
        "Эндокринная система": {{
            "Общий показатель": 7,
            "Щитовидная железа": 6,
            "Шишковидная железа": 7,
            "Надпочечники": 7,
            "Поджелудочная железа": 6,
            "Вилочковая железа": 7,
            "Половые железы": 7
        }},
        "Иммунная система": 7,
        "Пищеварение": {{
            "Общий показатель": 7,
            "Пищевод": 7,
            "Печень": 7,
            "Желудок": 6,
            "Толстый кишечник": 7,
            "Тонкий кишечник": 7,
            "Ротовая полость": 6
        }},
        "Выделительная система": 7,
        "Слух, зрение, вкус": 7,
        "Кроветворение органов": 7,
        "Психика": 7
    }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты медицинский анализатор. Оцени состояние организма по шкале от 1 до 10."},
            {"role": "user", "content": user_input}
        ],
        response_format={"type": "json_object"}
    )

    return response["choices"][0]["message"]["content"]

def get_health_scale_baby(height,weight,location,gender,date_birth):
    user_input = f"""
    Рост: {height}
    Вес: {weight}
    Пол: {gender}
    Дата рождения: {date_birth}
    Место проживания: {location}
  
    Ребёнок абсолютно здоров, без жалоб. Развитие соответствует возрасту.Анализировать по росту и вес!
    Оцени состояние по шкале ребенка от 1 до 10 для следующих категорий, добавляя общий показатель для каждой группы :

    - Общий тонус (Overall tone)
    - Дыхательная система (Respiratory System)
      - Общий показатель
      - Легкие (Lungs)
      - Трахея (Trachea)
      - Носоглотка (Nasopharynx)
      - Бронхи (Bronchi)
      - Рёбра (Ribs)
      - Диафрагма (Diaphragm)
    - Сердечно-сосудистая система (Cardiovascular System)
      - Общий показатель
      - Пульс (Pulse)
      - Систолическое давление (Systolic Pressure)
      - Диастолическое давление (Diastolic Pressure)
    - Опорно-двигательная система (Skeletal Muscle System)
      - Общий показатель
      - Скелет (Skeleton)
      - Мышцы (Muscles)
      - Защита (Protection)
      - Гибкость суставов (Joint Flexibility)
      - Амортизация (Shock Absorption)
      - Позвоночник (Spine)
    - Эндокринная система (Endocrine System)
      - Общий показатель
      - Щитовидная железа (Thyroid Gland)
      - Шишковидная железа (Pineal Gland)
      - Надпочечники (Adrenal Glands)
      - Поджелудочная железа (Pancreas)
      - Вилочковая железа (Thymus)
      - Половые железы (Sex Glands)
    - Иммунная система (Immune System) - Общий показатель
    - Пищеварительная система (Digestive System)
      - Общий показатель
      - Пищевод (Esophagus)
      - Печень (Liver)
      - Желудок (Stomach)
      - Толстый кишечник (Large Intestine)
      - Тонкий кишечник (Small Intestine)
      - Ротовая полость (Oral Cavity)
    - Выделительная система (Excretory System) - Общий показатель
    - Слух, зрение, вкус - Общий показатель
    - Кроветворение и обмен (Hematopoietic Metabolic System) - Общий показатель
    - Психика - Общий показатель

    Ответ должен быть ТОЛЬКО в формате JSON, например:
     {{
        "Общий тонус": 7,
        "Система дыхания": {{
            "Общий показатель": 6,
            "Легкие": 5,
            "Трахея": 6,
            "Носоглотка": 7,
            "Бронхи": 6,
            "Рёбра": 7,
            "Диафрагма": 6
        }},
        "Сердце и сосуды": {{
            "Общий показатель": 7,
            "Пульс": 7,
            "Систолическое давление": 6,
            "Диастолическое давление": 7
        }},
        "Скелет и мышцы": {{
            "Общий показатель": 8,
            "Скелет": 8,
            "Мышцы": 7,
            "Защита": 7,
            "Гибкость суставов": 8,
            "Амортизация": 7,
            "Позвоночник": 8
        }},
        "Эндокринная система": {{
            "Общий показатель": 7,
            "Щитовидная железа": 6,
            "Шишковидная железа": 7,
            "Надпочечники": 7,
            "Поджелудочная железа": 6,
            "Вилочковая железа": 7,
            "Половые железы": 7
        }},
        "Иммунная система": 7,
        "Пищеварение": {{
            "Общий показатель": 7,
            "Пищевод": 7,
            "Печень": 7,
            "Желудок": 6,
            "Толстый кишечник": 7,
            "Тонкий кишечник": 7,
            "Ротовая полость": 6
        }},
        "Выделительная система": 7,
        "Слух, зрение, вкус": 7,
        "Кроветворение органов": 7,
        "Психика": 7
    }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты медицинский анализатор. Оцени состояние организма по шкале от 1 до 10."},
            {"role": "user", "content": user_input}
        ],
        response_format={"type": "json_object"}
    )

    return response["choices"][0]["message"]["content"]

def get_health_scale_pet(user_data):
    user_input = f"""
    Вид: {user_data['pet']}
    Порода: {user_data['poroda']}
    Пол: {user_data['gender']}
    Возраст: {user_data['age']}
    Хрон. Заболевание: {user_data['disease']}
    Телосложение: {user_data['body']}
    

    Оцени состояние по шкале от 1 до 10 для следующих категорий, это питомец не человек, добавляя общий показатель для каждой группы:

    - Общий тонус (Overall tone)
    - Дыхательная система (Respiratory System)
    - Сердечно-сосудистая система (Cardiovascular System)
    - Опорно-двигательная система (Skeletal Muscle System)
    - Эндокринная система (Endocrine System)
    - Иммунная система (Immune System) - Общий показатель
    - Пищеварительная система (Digestive System)
    - Выделительная система (Excretory System) - Общий показатель
    - Сенсорная система (Sensory System) - Общий показатель
    - Кроветворение и обмен (Hematopoietic Metabolic System) - Общий показатель
    - Поведение / Темперамент (Mental Health System) - Общий показатель
    - Уши,нос,Ротовая полость (Oral Cavity)
    Ответ должен быть ТОЛЬКО в формате JSON, например:
    {{
        "Общий тонус": 7,
        "Система дыхания": 8,
        "Сердце и сосуды": 7,
        "Скелет и мышцы": 7,
        "Эндокринная система": 7,
        "Иммунная система": 7,
        "Пищеварение": 8
        "Выделительная система": 7,
        "Слух, зрение, обоняние": 7,
        "Кроветворение органов": 7,
        "Поведение / Темперамент": 7,
        "Уши,нос,Ротовая полость":8
    }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты медицинский анализатор. Оцени состояние организма по шкале от 1 до 10 это питомец не человек"},
            {"role": "user", "content": user_input}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def chat_update(data,message):
    prompt = f"""
    У тебя есть следующие данные состояния организма в формате JSON:

    {data}

    Пользователь ввел сообщение: "{message}"

    1. Найди соответствующую подсистему в JSON (например, если в сообщении "сердце", то это "Сердце и сосуды").
    2. Измени только её показатели (не трогай остальные).
    3. Используй шкалу от 1 до 10.
    4. Если сообщение содержит **негативные симптомы** — **снизь** показатели на 3-4 пункта.
    5. Если сообщение **положительное** (например, "всё хорошо", "отлично", "нормально", "никаких проблем") — **повышай** показатели на 2-3 пункта (но не выше 10).
    6. Если сообщение **нейтральное** или непонятное — **оставь показатели без изменений**.
    7. В ответе укажи **всё тело JSON**, изменив **только нужную подсистему**.

Ответ должен быть ТОЛЬКО в формате JSON, пример:
    {{
        "Общий тонус": 7,
        "Система дыхания": {{
            "Общий показатель": 6,
            "Легкие": 5,
            "Трахея": 6,
            "Носоглотка": 7,
            "Бронхи": 6,
            "Рёбра": 7,
            "Диафрагма": 6
        }},
        "Сердце и сосуды": {{
            "Общий показатель": 7,
            "Пульс": 7,
            "Систолическое давление": 6,
            "Диастолическое давление": 7
        }},
        "Скелет и мышцы": {{
            "Общий показатель": 8,
            "Скелет": 8,
            "Мышцы": 7,
            "Защита": 7,
            "Гибкость суставов": 8,
            "Амортизация": 7,
            "Позвоночник": 8
        }},
        "Эндокринная система": {{
            "Общий показатель": 7,
            "Щитовидная железа": 6,
            "Шишковидная железа": 7,
            "Надпочечники": 7,
            "Поджелудочная железа": 6,
            "Вилочковая железа": 7,
            "Половые железы": 7
        }},
        "Иммунная система": 7,
        "Пищеварение": {{
            "Общий показатель": 7,
            "Пищевод": 7,
            "Печень": 7,
            "Желудок": 6,
            "Толстый кишечник": 7,
            "Тонкий кишечник": 7,
            "Ротовая полость": 6
        }},
        "Выделительная система": 7,
        "Слух, зрение, вкус": 7,
        "Кроветворение органов": 7,
        "Психика": 7
    }}
    
    """
    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты медицинский анализатор. Оцени состояние организма по шкале от 1 до 10."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text=response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


    

def chat_system(message):
    SYSTEM_PROMPT = """
    "Вы — медицинский ассистент. Вы предоставляете только информацию, связанную со здоровьем. "
    "Если пользователь спрашивает о других темах, ответьте: "
    "'Извините, я предоставляю только медицинскую информацию.' "
    "Отвечайте простым текстом. Не используйте Markdown. Не используйте переносы строк, символы \\n или специальные символы форматирования. "
    "Ответ должен быть в одной строке или с короткими, понятными предложениями. Без форматирования."""

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": message}
        ],


    )

    return response["choices"][0]["message"]["content"]
def chat_system_pet(message):
    SYSTEM_PROMPT = """Вы — медицинский ассистент. Вы предоставляете только информацию, связанную со здоровьем питомца.  
    Если пользователь спрашивает о других темах, ответьте:  
    'Извините, я предоставляю только медицинскую информацию.'
    "Отвечайте простым текстом. Не используйте Markdown. Не используйте переносы строк, символы \\n или специальные символы форматирования. "
    "Ответ должен быть в одной строке или с короткими, понятными предложениями. Без форматирования."""

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": message}
        ],


    )

    return response["choices"][0]["message"]["content"]


def chat_update_pet(data, message):
    prompt = f"""
    У тебя есть следующие данные состояния организма в формате JSON:

    {data}

    Пользователь ввел сообщение: "{message}"
    Важно это не человек а ПИТОМЕЦ
    1. Найди соответствующую подсистему в JSON (например, если в сообщении "сердце", то это "Сердце и сосуды").
    2. Измени только её показатели (не трогай остальные).
    3. Используй шкалу от 1 до 10.
    4. Если сообщение содержит **негативные симптомы** — **снизь** показатели на 3-4 пункта.
    5. Если сообщение **положительное** (например, "всё хорошо", "отлично", "нормально", "никаких проблем") — **повышай** показатели на 2-3 пункта (но не выше 10).
    6. Если сообщение **нейтральное** или непонятное — **оставь показатели без изменений**.
    7. В ответе укажи **всё тело JSON**, изменив **только нужную подсистему**.
      {{
        "Общий тонус": 7,
        "Система дыхания": 8,
        "Сердце и сосуды": 7,
        "Скелет и мышцы": 7,
        "Эндокринная система": 7,
        "Иммунная система": 7,
        "Пищеварение": 8
        "Выделительная система": 7,
        "Слух, зрение, обоняние": 7,
        "Кроветворение органов": 7,
        "Поведение / Темперамент": 7,
        "Уши,нос,Ротовая полость":8
    }}
    """


    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты медицинский анализатор. Оцени состояние организма по шкале от 1 до 10."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict

def crash_test(user_data):
    prompt = f"""
    Представь, что ты медицинский ИИ, оценивающий риски для здоровья на основе вредных привычек человека.

    Не сглаживай, не утешай. Будь предельно прямолинеен и реалистичен. Если риски критические — сообщи об этом. Будь как в краш-тесте: моделируй ухудшения организма и смертность.

    Данные пользователя:
    - Сигареты в день: {user_data['smoke_day']}
    - Стаж курения (лет): {user_data['exp_smoke']}
    - Бросал курить: {user_data['drop_smoke']}
    - Алкоголь в неделю: {user_data['alcohol_week']}
    - Алкоголь за день (максимум): {user_data['alcohol_litr']}
    - Психотропные вещества (дни в месяц): {user_data['drug_day']}
    - Сон (часов в сутки): {user_data['day_sleep']}
    - Переработки: {user_data['work']}
    - Уровень стресса: {user_data['level_stress']}
    - Склонность к самоповреждению: {user_data['habit']}
    - Беспорядочные связи: {user_data['sex']}
    - Экологическая среда: {', '.join(user_data['environment'])}
    - Рациональное питание: {user_data['food']}

    Определи ожидаемую продолжительность жизни и сформулируй краткий анализ состояния здоровья.
    
    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{"life_expectancy": 10,
       "message": str (На основе ваших ответов был отмечен фактор риска — курение. Это может оказывать негативное влияние на общее состояние организма. Мы рекомендуем начать с постепенного снижения вредного воздействия, избегая резких изменений. Чтобы сделать процесс контроля более осознанным, вы можете воспользоваться разделом "Трекер привычек" в нашем веб-приложении. Там вы сможете отслеживать дни без курения, фиксировать прогресс и своевременно вносить коррективы — это поддержит мотивацию и поможет двигаться к более здоровому образу жизни.)}}

    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт в анализе здоровья и вредных привычек."},
            {"role": "user", "content": prompt}
        ],
        response_format={ "type": "json_object" }
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)


    return result_dict


def lifestyle_test(user_data):
    prompt = f"""
    Оцените образ жизни на основе следующих данных:
    - Считаете ли вы свой сон качественным? (1-7): {user_data['sleep']}
    - Считаете ли вы, что ваш рацион состоит из полезной еды? (1-7): {user_data['food']}
    - Каждый свой день вы начинаете с зарядки? (1-7): {user_data['training']}
    - У вас есть вторая половинка или супруг(а)? (да/нет): {user_data['couple']}

    Определите уровень физической подготовки и сформулируйте краткий анализ состояния здоровья.

    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{ "message": "Ваш уровень физической подготовки является средним. Возможно, стоит уделить больше внимания физической активности. хотелось бы видеть хотя бы ссылки на источники и рекоминлации"}}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт в области здоровья и образа жизни."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def symptoms_test(user_data):
    prompt = f"""
    Оцените симптомы на основе следующих данных:
    - Выбор симптомов: {', '.join(user_data['symptoms'])}
    - Насколько нормальной была температура тела в последние дни? (1-7): {user_data['temp']}
    - Болели ли вы COVID-19 в последние пару лет? (да/нет): {user_data['covid']}
    - Оцените затрудненность дыхания (1-7): {user_data['breath']}
    - Было ли у вас  кашель ?(1-7): {user_data['cough']}
    - Было ли у вас  заложенность носа?(1-7): {user_data['congestion']}
    - Боль в мышцах (1-7): {user_data['muscle']}
    - Боль в груди (1-7): {user_data['chest']}
    - Головная боль и слабость (1-7): {user_data['headache']}
    - Тошнота, рвота или диарея (1-7): {user_data['vomit']}

    Определите общее состояние здоровья и сформулируйте краткий анализ.

    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{ "message": "Согласно отправленным вами данных мы можем предположить, что вам не стоит волноваться по этому поводу.хотелось бы видеть хотя бы ссылки на источники и рекоминлации" }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты медицинский помощник, который анализирует симптомы."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def lestnica_test(pulse):
    prompt = f"""
    Тест на лестнице Выполнение теста:
    1. Подниматься на лестницу, используя попеременный шаг, с равномерным темпом в течение 3 минут подряд.
    2. Через 3 минуты остановиться и сесть на стул.
    3. Через 1 минуту после завершения теста подсчитать частоту пульса.

    Подсчитайте пульс сидя, на протяжении 15 сек.

    Пульс: {pulse}

    Проанализируй полученные данные и сделай вывод о физической подготовке человека.
    Ответ должен быть ТОЛЬКО в формате JSON, например:
    {{ "message":"Исходя из полученных данных, можем сделать вывод, что ваш уровень физической подготовки является [уровень].хотелось бы видеть хотя бы ссылки на источники и рекоминлации"}}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты медицинский эксперт, анализируешь физическую подготовку по пульсу."},
            {"role": "user", "content": prompt}],
        response_format={"type": "json_object"}
    )

    result_text=response["choices"][0]["message"]["content"]

    result_dict = json.loads(result_text)

    return result_dict




def breath_test(user_data):
    prompt = f"""
    Проба Штанге (задержка дыхания на вдохе). После 5 мин отдыха сидя сделать 2-3
    глубоких вдоха и выдоха, а затем, сделав глубокий вдох (80- 90 % максимального),
    задержать дыхание.

    Данные теста:
    - Количество вдохов-выдохов: {user_data['breathing']}
    - Время задержки дыхания: {user_data['breathing_time']} секунд

    Проанализируй данные и сделай вывод о реакции организма. Ответ должен быть ТОЛЬКО в формате JSON:

    {{
      "message": f"Вы задержали дыхание на {user_data['breathing_time']} секунд — это соответствует удовлетворительной реакции организма. Для вашего возраста это считается нормой, однако увеличение этого показателя до 50–60 секунд может говорить о лучшей адаптации к физическим нагрузкам. Попробуйте тренировки на дыхание и умеренную кардионагрузку, чтобы улучшить результат..хотелось бы видеть хотя бы ссылки на источники и рекоминлации"
    }}

    Подставь правильную оценку вместо [оценка реакции организма]:
    - Менее 30 секунд – слабая реакция организма.
    - От 30 до 44 секунд – ниже среднего.
    - От 45 до 59 секунд – удовлетворительная реакция организма.
    - От 60 до 89 секунд – хорошая реакция организма.
    - 90 секунд и более – отличная реакция организма.
    """

    response = openai.ChatCompletion.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "Ты эксперт по физическим тестам. Дай анализ задержки дыхания."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text=response["choices"][0]["message"]["content"]

    result_dict = json.loads(result_text)

    return result_dict


def genchi_test(user_data):

    prompt = f"""
    Проба Генчи (задержка дыхания на выдохе) выполняется так же, как и проба Штанге, 
    только задержка дыхания производится после полного выдоха.

    Данные теста:
    - Время задержки дыхания: {user_data['breathing_time']} секунд
    - Являетесь ли вы спортсменом?: {user_data['sportsmen']}

    Проанализируй данные и сделай вывод о реакции организма. Ответ должен быть ТОЛЬКО в формате JSON:

    {{
      "message": f"При задержке дыхания на выдохе ваш результат составил 35 секунд, для человека который  занимается спортом результат является  [оценка реакции организма].хотелось бы видеть хотя бы ссылки на источники и рекоминлации"
    }}

    Подставь правильную оценку вместо [оценка реакции организма]:
    - Менее 20 секунд – слабая реакция организма.
    - От 20 до 34 секунд – удовлетворительная реакция.
    - От 35 до 45 секунд – хорошая реакция.
    - Более 45 секунд – отличная реакция.
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт по физическим тестам. Дай анализ задержки дыхания."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text=response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def ruffier_test(user_data):
    po = user_data['pulse_main']  # Пульс в состоянии покоя (15 сек)
    p1 = user_data['pulse_first']  # Пульс в первые 15 сек после нагрузки
    p2 = user_data['pulse_second']  # Пульс в последние 15 сек первой минуты отдыха

    prompt = f"""
    Тест Руфье предназначен для оценки физической работоспособности.

    Данные теста:
    - Пульс в покое (Po): {po * 4} ударов в минуту
    - Пульс в первые 15 сек после нагрузки (P1): {p1 * 4} ударов в минуту
    - Пульс в последние 15 сек первой минуты отдыха (P2): {p2 * 4} ударов в минуту

    Формула для расчёта индекса Руфье:
    IR = (4 * (P1 + P2 + Po) - 200) / 10

    Подсчитай индекс Руфье и оцени физическую работоспособность по шкале:
    - Менее 0 – высокая физическая работоспособность.
    - От 0 до 3 – хорошая физическая работоспособность.
    - От 3 до 6 – средняя физическая работоспособность.
    - От 6 до 10 – удовлетворительная физическая работоспособность.
    - Более 10 – низкая физическая работоспособность.

    Ответ должен быть ТОЛЬКО в формате JSON:

    {{
      "message": "Полученный индекс Руфье {{"индекс"}}, по скорости восстановления после нагрузки можем сделать вывод, что у вас {{"уровень физической работоспособности"}}.хотелось бы видеть хотя бы ссылки на источники и рекоминлации"
    }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт по физическим тестам. Проанализируй данные теста Руфье."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def kotova_test(user_data):
    prompt = f"""
    В этом тесте оценивается восстановительная способность организма после физической нагрузки.

    **Этапы теста:**
    1️⃣ В состоянии покоя измеряются пульс и артериальное давление.
    2️⃣ Обследуемый выполняет бег на месте в течение 3 минут (180 шагов в минуту, с высоким подниманием бедра).
    3️⃣ После нагрузки обследуемый садится, и в течение 5 минут фиксируются показатели пульса и давления.

    **Данные теста:**
    - Пульс в состоянии покоя (за 10 секунд): {user_data['pulse_main']}
    - Верхнее (систолическое) давление: {user_data['pressure_top']}
    - Нижнее (диастолическое) давление: {user_data['pressure_bottom']}
    - Пульс в первые 10 секунд после нагрузки: {user_data['pulse_first']}
    - Пульс в последние 10 секунд 5-й минуты восстановления: {user_data['pulse_second']}

    **Задание для AI:**
    - Проанализируй изменения пульса и давления.
    - Определи уровень прироста (в пределах нормы или нет).
    - Сделай вывод о реакции организма на нагрузку.
    - Ответ должен быть ТОЛЬКО в формате JSON:

    {{
      "message": "Исходя из полученных данных можем сделать вывод, что прирост равномерный, 100-120%, время восстановления 5 минут - реакция организма удовлетворительная.хотелось бы видеть хотя бы ссылки на источники и рекоминлации"
    }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system",
             "content": "Ты медицинский эксперт по физическим нагрузкам и анализу восстановления организма."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict

def martinet_test(user_data):
    prompt = f"""
    **Проба Мартинэ** – это метод оценки реакции сердечно-сосудистой системы на физическую нагрузку.

    **Методика проведения:**  
    1️⃣ В покое измеряются пульс (15 секунд) и артериальное давление.  
    2️⃣ Испытуемый выполняет 30 глубоких приседаний за 45 секунд.  
    3️⃣ В течение 1 минуты после нагрузки измеряются пульс и давление:  
       - В первые 15 секунд после нагрузки (P1)  
       - В последние 15 секунд 1-й минуты отдыха (P2)  
       - Артериальное давление фиксируется с 49 по 11 секунду.  

    **Входные данные:**  
    - Пульс в покое (за 15 секунд): {user_data['pulse_main']}  
    - Верхнее (систолическое) давление: {user_data['pressure_top']}  
    - Нижнее (диастолическое) давление: {user_data['pressure_bottom']}  
    - Пульс в первые 10 секунд после нагрузки: {user_data['pulse_first']}  
    - Пульс в последние 10 секунд 1-й минуты отдыха: {user_data['pulse_second']}  

    **Задание для AI:**  
    - Проанализируй изменение пульса и давления.  
    - Определи процентное изменение пульса.  
    - Определи разницу в артериальном давлении.  
    - Дай заключение о реакции организма на нагрузку.  
    - Ответ должен быть ТОЛЬКО в формате JSON:  

    {{
      "message": "Исходя из полученных данных можем сделать вывод, что учащение 30%, систол. АД увеличение 15 мм.рт.ст., диаст. снижение 17 мм.рт.ст., пульсовое увеличение, время восстановления 2 мин, что является благоприятной реакцией организма.хотелось бы видеть хотя бы ссылки на источники и рекоминлации"
    }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт по кардионагрузкам и восстановлению организма."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict
def cooper_test(user_data):
    prompt = f"""
    **Тест Купера** – это метод оценки общей физической выносливости.

    **Методика проведения:**  
    1️⃣ Перед началом выполняется разминка, чтобы избежать травм.  
    2️⃣ Испытуемый бежит в течение **12 минут**, равномерно распределяя силы.  
    3️⃣ Если усталость наступает раньше, можно перейти на шаг, но нельзя останавливаться.  
    4️⃣ По завершении фиксируется общая дистанция, включая метры, преодоленные пешком.  

    **Входные данные:**  
    - Пройденная дистанция: {user_data['distance']} метров  

    **Задание для AI:**  
    - Проанализируй дистанцию в соответствии с таблицей оценки физической подготовки.  
    - Дай заключение о выносливости испытуемого.  
    - Ответ должен быть ТОЛЬКО в формате JSON:  

    {{
      "message": "На основании ваших данных можно сделать вывод, что текущий уровень физической подготовки оценивается как средний. Это говорит о том, что вы находитесь в приемлемой форме, однако есть потенциал для улучшения выносливости и общей активности. Рекомендуется добавить умеренные кардио-нагрузки (например, ходьбу, бег или плавание 2–3 раза в неделю) и повторить тест через месяц для отслеживания прогресса."
    }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт по тестам на выносливость и физическую подготовку."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def daily_check(user_data,yesterday=None):
    prompt = f"""
       **Анализ самочувствия пользователя**

       Твоя задача — сравнить текущее состояние пользователя с предыдущим днём по следующим параметрам:
       - Общее самочувствие (`feel_today`)
       - Настроение (`mood`)
       - Аппетит (`appetite`)
       - Физическое состояние (`physical`)
       - Сон (`sleep`)

       **Сегодняшние данные:**
       - feel_today: {user_data['feel_today']}
       - mood: {user_data['mood']}
       - appetite: {user_data['appetite']}
       - physical: {user_data['physical']}
       - sleep: {user_data['sleep']}

       
       
       

       **Твоя задача:**
       - Ответ должен быть ТОЛЬКО в формате JSON:
       -Вчерашние данные:{yesterday}
       ИИ анализирует ответы пользователя и сравнивает именно со вчерашним днем, показывая ответ что-то по типу: Общее самочувствие: Есть небольшое снижение по сравнению с предыдущим днём. Возможно, организм требует больше отдыха. Настроение: Осталось на прежнем уровне — без резких изменений. Аппетит: Отмечается положительная динамика — сегодня питание было немного лучше. Физическое состояние: Появились незначительные жалобы, стоит понаблюдать за собой в ближайшие дни. Сон:  Качество сна примерно такое же, как и вчера.

       {{
         "message":"Общее самочувствие: Есть небольшое снижение по сравнению с предыдущим днём. Возможно, организм требует больше отдыха. Настроение: Осталось на прежнем уровне — без резких изменений. Аппетит: Отмечается положительная динамика — сегодня питание было немного лучше. Физическое состояние: Появились незначительные жалобы, стоит понаблюдать за собой в ближайшие дни. Сон:  Качество сна примерно такое же, как и вчера."
       }}
       """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт по анализу физического и психоэмоционального состояния человека."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def petdaily_check(user_data, yesterday=None):
    prompt = f"""
       **Анализ самочувствия питомеца**

       Твоя задача — сравнить текущее состояние питомеца с предыдущим днём по следующим параметрам:
       - Был ли стул у питомца? 
       - Активность питомца
       - Как питомец вёл себя ночью/днём
       - Аппетит
       - Питьевой режим

       **Сегодняшние данные:**
       - Был ли стул у питомца?: {user_data['feel_today']}
       - Активность питомца: {user_data['mood']}
       - Как питомец вёл себя ночью/днём: {user_data['appetite']}
       - Аппетит: {user_data['physical']}
       - Питьевой режим: {user_data['sleep']}





       **Твоя задача:**
       - Ответ должен быть ТОЛЬКО в формате JSON:
       -Вчерашние данные:{yesterday}
       ИИ анализирует ответы пользователя и сравнивает именно со вчерашним днем, показывая ответ что-то по типу: Общее самочувствие: Есть небольшое снижение по сравнению с предыдущим днём. Возможно, организм требует больше отдыха. Настроение: Осталось на прежнем уровне — без резких изменений. Аппетит: Отмечается положительная динамика — сегодня питание было немного лучше. Физическое состояние: Появились незначительные жалобы, стоит понаблюдать за собой в ближайшие дни. Сон:  Качество сна примерно такое же, как и вчера.

       {{
         "message":"Общее самочувствие: Есть небольшое снижение по сравнению с предыдущим днём. Возможно, организм требует больше отдыха. Настроение: Осталось на прежнем уровне — без резких изменений. Аппетит: Отмечается положительная динамика — сегодня питание было немного лучше. Физическое состояние: Появились незначительные жалобы, стоит понаблюдать за собой в ближайшие дни. Сон:  Качество сна примерно такое же, как и вчера."
       }}
       """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system",
             "content": "Ты эксперт по анализу физического и психоэмоционального состояния питомеца."},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def rentgen(photo_files, message):




    try:
        image_contents = [
            {
                "type": "image_url",
                "image_url": {
                    "url": f"data:image/jpeg;base64,{base64.b64encode(photo.read()).decode('utf-8')}"
                }
            }
            for photo in photo_files
        ]
    except:
        image_contents=[]



    # Текстовый запрос
    prompt = f"""
    Твоя задача:

    Проанализируй загруженные изображения. Это могут быть рентгены, УЗИ или другие медицинские сканы.

    {"Дополнительная информация от пользователя: " + message if message else ""}

    - Ответ должен быть ТОЛЬКО в формате JSON:
    {{
      "message": "Тут можно более расширенно написать и дать какие-то рекомендации"
    }}
    """

    # Собираем сообщение
    messages = [
        {"role": "system", "content": "Ты медицинский помощник, который анализирует изображения, загруженные пользователями."},
        {"role": "user", "content": [{"type": "text", "text": prompt}] + image_contents}
    ]

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=messages,
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)
    return result_dict
def petrentgen(photo_files, message):




    try:
        image_contents = [
            {
                "type": "image_url",
                "image_url": {
                    "url": f"data:image/jpeg;base64,{base64.b64encode(photo.read()).decode('utf-8')}"
                }
            }
            for photo in photo_files
        ]
    except:
        image_contents=[]




    prompt = f"""
    Твоя задача:

   ИИ анализирует загруженное фото Когда пользователь загружает фото, система должна показать, какие части тела животного были проанализированы. Пример: "Глаз — признаков воспаления нет" "Шерсть — блестящая, равномерная" "Ухо — покраснение, рекомендована проверка". Ответы ограничены только вопросами, связанными с животным и его здоровьем..

    {"Дополнительная информация от пользователя: " + message if message else ""}

    - Ответ должен быть ТОЛЬКО в формате JSON:
    {{
      "message": "Тут можно более расширенно написать и дать какие-то рекомендации"
    }}
    """

    # Собираем сообщение
    messages = [
        {"role": "system", "content": "Ты медицинский помощник, который анализирует изображения, загруженные пользователями.связанными с животным и его здоровьем"},
        {"role": "user", "content": [{"type": "text", "text": prompt}] + image_contents}
    ]

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=messages,
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)
    return result_dict
def calories(photo_files):

    image_contents = {
        "type": "image_url",
        "image_url": {
            "url": f"data:image/jpeg;base64,{base64.b64encode(photo_files.read()).decode('utf-8')}"
        }
    }






    # Текстовый запрос
    prompt = prompt = f"""
1. Посмотри на изображение.
2. Если на фото изображена еда, напитки или съедобный предмет — точно определи продукты и подробно укажи калорийность каждого из них.
3. Если на фото нет еды (например, документ, пейзаж, человек и т.п.) — просто напиши: 
   "Пожалуйста, отправьте фото еды для расчёта калорийности."

В этом разделе осуществляется только расчёт калорийности — ИИ не должен отвечать на другие вопросы.

Ответ должен быть ТОЛЬКО в формате JSON:

Если еда есть:
{{
  "message": "Добрый день! В составе блюда следующие ингредиенты:\\n\\n— [ингредиент 1] — [вес] г / [ккал] ккал\\n— [ингредиент 2] — [вес] г / [ккал] ккал\\n...\\n\\nОбщая масса блюда: [общий вес] г\\nОбщая калорийность: [общая калорийность] ккал",
  "detail": [
    {{
      "еда": "название",
      "вес": 100,
      "ккал": 200,
      "белок": 10,
      "жир": 5,
      "углеводы": 30,
      "клетчатка": 2
    }}
  ],
  "total": {{
    "вес": 300,
    "ккал": 600,
    "белок": 30,
    "жир": 15,
    "углеводы": 90,
    "клетчатка": 6
  }}
}}

Если это не еда:
{{
  "message": "Пожалуйста, отправьте фото еды для расчёта калорийности."
}}
"""

    # Собираем сообщение
    messages = [
        {"role": "system", "content": "В этом разделе осуществляется только расчёт калорийности "},
        {"role": "user", "content": [{"type": "text", "text": prompt}] + [image_contents]}
    ]

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=messages,
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)
    return result_dict


def pet_calories(photo_files):
    image_contents = {
        "type": "image_url",
        "image_url": {
            "url": f"data:image/jpeg;base64,{base64.b64encode(photo_files.read()).decode('utf-8')}"
        }
    }

    # Текстовый запрос
    prompt = f"""
     1. Посмотри на изображение.
    2. Если на фото изображена еда,напитки,или съедобный что нибудь — точно определи продукты и подробно укажи калорийность каждого из них.
    3. Если на фото нет еды (например, это документ, пейзаж, человек и т.п.) — просто напиши: 
       "Пожалуйста, отправьте фото еды для расчёта калорийности."
    
    В этом разделе осуществляется только расчёт калорийности — ИИ не должен отвечать на другие вопросы.
    
    Ответ должен быть ТОЛЬКО в формате JSON:
    
    Если еда есть:
    {{
  "message": "Добрый день! В составе блюда следующие ингредиенты:\\n\\n— [ингредиент 1] — [вес] г / [ккал] ккал\\n— [ингредиент 2] — [вес] г / [ккал] ккал\\n...\\n\\nОбщая масса блюда: [общий вес] г\\nОбщая калорийность: [общая калорийность] ккал",
      "detail": [
        {{
          "еда": "название",
          "вес": 100,
          "ккал": 200,
          "белок": 10,
          "жир": 5,
          "углеводы": 30,
          "клетчатка": 2
        }}
      ],
      "total": {{
        "вес": 300,
        "ккал": 600,
        "белок": 30,
        "жир": 15,
        "углеводы": 90,
        "клетчатка": 6
      }}
    }}
    
    Если это не еда:
    {{
      "message": "Пожалуйста, отправьте фото еды для расчёта калорийности."
    }}
    """

    # Собираем сообщение
    messages = [
        {"role": "system", "content": "В этом разделе осуществляется только расчёт калорийности для питомца"},
        {"role": "user", "content": [{"type": "text", "text": prompt}] + [image_contents]}
    ]

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=messages,
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)
    return result_dict
def lifestyle_test_dog(user_data):
    prompt = f"""
    Оцените Энергетический уровень и активность собаки на основе следующих данных:
    - Как часто ваша собака просится на улицу?: {user_data['dog_street']}
    - Как ведёт себя на прогулке — тянет, спокойно идёт, боится?: {user_data['walk']}
    - Сколько длится обычная прогулка?: {user_data['time_walk']}
    - Проявляет ли интерес к играм дома? : {user_data['play_home']}
    - Как реагирует на новых людей или животных? :{user_data['new_pet']}
    - Бывают ли внезапные скачки активности без причины? : {user_data['jump']}
    - Как собака реагирует на команды?: {user_data['commands']}
    - Есть ли признаки ожирения (вялость, складки, тяжёлое передвижение)? : {user_data['fat']}
    - Двигается ли с трудом, волочит ли лапы, были ли падения или травмы?: {user_data['injury']}
    - Может ли собака спокойно лечь или постоянно ходит и не находит места?: {user_data['l']}
    Цель: определить уровень активности собаки и её соответствие образу жизни владельца.

    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{ "message": "Гиперактивная собака требует особого подхода.  Для снижения уровня возбуждения и поддержания эмоционального баланса ей необходимы длительные прогулки, регулярная физическая нагрузка и занятия, развивающие умственные способности (например, игры на поиск предметов или команды на сообразительность. хотелось бы видеть хотя бы ссылки на источники и рекоминлации"
      }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт в области здоровья и образа жизни.Это питомец не человек"},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict
def emotion_test_dog(user_data):
    prompt = f"""
    Оцените Эмоциональное состояние и стресс собаки на основе следующих данных:
    - Часто ли собака прячется или избегает людей?: {user_data['avoid']}
    - Есть ли навязчивое поведение (лизание лап, скулёж, бег по кругу)?: {user_data['run']}
    - Как собака реагирует на одиночество?: {user_data['cat_one']}
    - Были ли изменения поведения после визита к ветеринару или переезда? : {user_data['change']}
    - Проявляется ли агрессия без причины? :{user_data['agressive']}
    - Бывает ли дрожь (тремор)? : {user_data['tremor']}
    - Как ведёт себя в незнакомом месте — прячется или исследует?: {user_data['place']}
    - Спокойно ли спит ночью или не может улечься, ходит? : {user_data['sleep']}
    - Реагирует ли на имя, устанавливает ли зрительный контакт?: {user_data['contact']}
    - Есть ли страх перед громкими звуками (гром, фейерверки)?: {user_data['fear']}
    Цель: выявить признаки тревожности, депрессии или переутомления у собаки.

    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{ "message": "Судя по вашим ответам, у питомца наблюдаются признаки лёгкой тревожности или повышенной возбудимости. Такое состояние может быть связано с переменами в окружении, недостатком активности или стрессом при одиночестве. Рекомендации:  – Попробуйте уделять больше времени играм и прогулкам.  – Обустройте для собаки «тихую зону» дома, где она сможет отдыхать без раздражителей.  – Если симптомы сохраняются — обратитесь к ветеринару или кинологу-поведенческому специалисту."
      }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт в области здоровья и образа жизни.Это питомец не человек"},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict

def habit_test_dog(user_data):
    prompt = f"""
    Оцените Пищевые привычки и здоровье ЖКТ собаки на основе следующих данных:
    - Какой аппетит у собаки: ест охотно, вяло или отказывается?: {user_data['apetit']}
    - Была ли рвота: чем (вода, еда, слизь)?: {user_data['vomit']}
    - Изменялся ли стул: слизь, кровь, исчезновение?: {user_data['change']}
    - Какой запах у фекалий — обычный, зловонный, резкий? : {user_data['smell']}
    - Какой цвет мочи: светлая, тёмная, прозрачная? :{user_data['mochi']}
    - Бывают ли проблемы с мочеиспусканием (редко/часто/нет)? : {user_data['pee_problem']}
    - Бывает ли урчание, метеоризм, вздутие?: {user_data['metorizm']}
    - Проявляет ли интерес к несъедобным предметам? : {user_data['predmet']}
    - Меняли ли рацион, добавляли ли еду со стола, давали витамины?: {user_data['vitamin']}
    - Как ведёт себя после еды: активна, сонная, тревожная?: {user_data['eat']}
    Цель: выявить нарушения в питании или возможные проблемы с ЖКТ.

    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{ "message": "Судя по вашим ответам, есть признаки нерегулярного питания и возможных сбоев в работе желудочно-кишечного тракта. Это может проявляться в виде тяжести после еды, вздутия или нестабильного стула. Рекомендуем начать с простых шагов:  — установить стабильный режим приёмов пищи,  — исключить жирную и слишком сладкую пищу,  — ввести в рацион больше клетчатки и пробиотиков. В разделе «Питание» вы можете получить рекомендации по составлению рациона или задать вопрос по симптомам."
      }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт в области здоровья и образа жизни.Это питомец не человек"},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def emotion_test_cat(user_data):
    prompt = f"""
    Оцените Поведение и эмоциональное состояние кошки на основе следующих данных:
    - Часто ли кошка прячется или избегает людей?: {user_data['avoid']}
    - Проявляет ли агрессию (шипение, удары лапой) без видимых причин?: {user_data['agressive']}
    - Были ли изменения в поведении после визита к ветеринару, переезда или нового окружения?: {user_data['change']}
    - Проявляет ли гиперактивность или наоборот апатию? : {user_data['apatiya']}
    - Часто ли мяукает или издаёт тревожные звуки? :{user_data['sound']}
    - Есть ли признаки саморазрушительного поведения (облизывание до залысин)? : {user_data['behaviour']}
    - Как кошка реагирует на новые места или предметы (замирает, обнюхивает, паникует)?: {user_data['place']}
    - Есть ли страх перед звуками, посторонними людьми? : {user_data['fear']}
    - Реагирует ли кошка на своё имя или обращение?: {user_data['contact']}
    - Легко ли адаптируется к новому корму или туалету?: {user_data['adaption']}
    Цель: оценить общее психоэмоциональное состояние кошки — стресс, тревожность, скука.

    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{ "message": "По результатам опроса видно, что эмоциональное состояние вашей кошки находится в пределах нормы, однако присутствуют незначительные признаки беспокойства или напряжённости. Что можно сделать:  – Убедитесь, что у кошки есть безопасное укромное место для отдыха.  – Старайтесь соблюдать режим дня — это снижает стресс.  – Избегайте резких изменений в окружающей среде (ремонт, новые животные, переезды).  – Используйте феромоны или обогащение среды (игрушки, когтеточки, полки для лазания). При сохранении признаков тревожности или появлении навязчивого поведения — проконсультируйтесь с ветеринаром."
      }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт в области здоровья и образа жизни.Это питомец не человек"},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict

def sleep_test_cat(user_data):
    prompt = f"""
    Оцените Качество сна и суточная активность кошки на основе следующих данных:
    - Где чаще всего спит кошка?: {user_data['sleep_place']}
    - Как долго спит днём(в часах)?: {user_data['time_sleep']}
    - Активна ли по ночам (мяукает, бегает)?: {user_data['run']}
    - Часто ли меняет спальные места?: {user_data['change_place']}
    - Бывает ли, что просыпается резко, в панике?:{user_data['panic']}
    - Проявляет ли утомление после игр? : {user_data['tired']}
    - Легко ли её разбудить?: {user_data['wake_up']}
    - Бывает ли, что спит очень долго и отказывается от еды? : {user_data['dish']}
    - Предпочитает ли спать рядом с человеком или уединённо?: {user_data['alone']}
    - Наблюдается ли тревожное поведение перед сном?: {user_data['behaviour']}
    Цель: оценить, как хорошо кошка восстанавливается, соблюдается ли баланс активности и отдыха.

    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{ "message": "Судя по вашим ответам, режим сна и бодрствования питомца выглядит стабильным. Нет признаков бессонницы, чрезмерной вялости или гиперактивности. Рекомендации:  – Сохраняйте чёткий распорядок дня: прогулки, кормление и отдых должны быть регулярными.  – Избегайте шумов и стрессов в ночное время — это важно для полноценного сна.  – Следите за изменениями: частые ночные передвижения или апатия днём могут сигнализировать о проблемах. Если изменения в активности продолжаются более 2–3 дней — стоит проконсультироваться с ветеринаром."
      }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт в области здоровья и образа жизни.Это питомец не человек"},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict

def apetit_test_cat(user_data):
    prompt = f"""
    Оцените Аппетит и пищеварение  кошки на основе следующих данных:
    - Какой у кошки аппетит?: {user_data['apetit']}
    - Бывают ли случаи рвоты? Чем именно (шерсть, слизь, еда, пена)?: {user_data['vomit']}
    - Изменяется ли стул по консистенции, частоте, цвету?: {user_data['color']}
    - Есть ли признаки аллергии (зуд, расчесы, покраснение)?: {user_data['allergy']}
    - Часто ли отказывается от привычной еды?:{user_data['dish']}
    - Бывает ли метеоризм, урчание, вздутие?: {user_data['metorizm']}
    - Меняли ли рацион или корм в последние дни?: {user_data['ration']}
    - Есть ли запах изо рта? : {user_data['smell']}
    - Проявляет ли интерес к еде человека?: {user_data['interest']}
    - Как ведёт себя после еды — уходит спать, активна, тревожна?: {user_data['active']}
    Цель: понять, есть ли проблемы с ЖКТ, пищевыми привычками или аллергиями.
    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{ "message": "По анализу ваших ответов признаки серьёзных проблем с пищеварением не выявлены. Аппетит и стул в пределах нормы, поведение стабильное. Рекомендации:  – Сохраняйте постоянство в рационе, избегайте резких смен корма.  – Следите за качеством воды и чистотой мисок.  – Если заметите рвоту, понос, запор или отказ от еды — обратитесь к ветеринару.  – Периодически можно проводить профилактическую дегельминтизацию по графику. Также не забывайте контролировать вес питомца и его поведение после приёма пищи."
      }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт в области здоровья и образа жизни.Это питомец не человек"},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def povidenie_test_grizuna(user_data):
    prompt = f"""
    Оцените Поведение и признаки комфорта грызуна на основе следующих данных:
    - Часто ли грызун прячется и не выходит даже к корму?: {user_data['one']}
    - Бегает ли активно по клетке или в колесе?: {user_data['two']}
    - Идёт ли на контакт с вами (руки, голос)?: {user_data['three']}
    - Есть ли навязчивые действия (грызёт решётку, бегает по кругу)?: {user_data['four']}
    - Меняется ли поведение при смене подстилки или корма?:{user_data['five']}
    - Часто ли питомец издаёт тревожные звуки?: {user_data['six']}
    - Наблюдаете ли признаки агрессии?: {user_data['seven']}
    - Любит ли грызть игрушки, туннели, картон? : {user_data['eight']}
    - Есть ли выделения из глаз или носа?: {user_data['nine']}
    - Подходит ли к поилке и кормушке без страха?: {user_data['ten']}
    Цель: оценить, насколько питомец чувствует себя безопасно и комфортно в своей среде.
    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{ "message": "Поведение питомца в целом указывает на адаптацию и комфорт. Признаков тревожности или стресса не обнаружено. Совет:  Продолжайте соблюдать привычный режим и чистоту в клетке. При резких изменениях поведения (прятание, агрессия, постоянное грызение) — стоит обратить внимание на условия содержания или самочувствие."
      }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт в области здоровья и образа жизни.Это питомец не человек"},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def forma_test_grizuna(user_data):
    prompt = f"""
    Оцените Активность и физическая форма грызуна на основе следующих данных:
    - Часто ли грызун бегает, исследует клетку?: {user_data['one']}
    - Пользуется ли колесом/туннелями?: {user_data['two']}
    - Как быстро реагирует на внешние раздражители?: {user_data['three']}
    - Есть ли признаки ожирения (боковые складки, тяжёлое передвижение)?: {user_data['four']}
    - Бывают ли скачки активности?:{user_data['five']}
    - Насколько легко дышит?: {user_data['six']}
    - Выглядит ли шерсть ухоженной?: {user_data['seven']}
    - Проявляет ли интерес к новому? : {user_data['eight']}
    - Двигается ли с затруднением или волочит лапы?: {user_data['nine']}
    - Бывало ли, что падал с высоты или получал травму?: {user_data['ten']}
    Цель: понять, достаточно ли движения и нет ли признаков вялости, ожирения или апатии.
    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{ "message": "Питомец проявляет здоровую активность, его подвижность, интерес к окружающей среде и физическое состояние соответствуют возрасту и виду. Масса тела не выходит за рамки нормы, признаков гиподинамии или переутомления не выявлено. Рекомендации:  Продолжайте обеспечивать просторную клетку, элементы обогащения среды (колёсико, тоннели, игрушки), а также сбалансированный рацион. Регулярное наблюдение поможет вовремя заметить изменения в активности, которые могут быть сигналом о проблемах со здоровьем."
      }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт в области здоровья и образа жизни.Это питомец не человек"},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict


def apetit_test_grizuna(user_data):
    prompt = f"""
    Оцените Аппетит и пищеварение грызуна на основе следующих данных:
    - Сколько корма остаётся в миске?: {user_data['one']}
    - Пьёт ли питомец достаточно воды?: {user_data['two']}
    - Бывают ли жидкий стул или его отсутствие?: {user_data['three']}
    - Ест ли питомец с аппетитом или вяло?: {user_data['four']}
    - Отказывается ли от твёрдой пищи?:{user_data['five']}
    - Есть ли запах изо рта или от шерсти?: {user_data['six']}
    - Грызёт ли веточки, сено (если это допустимо)?: {user_data['seven']}
    - Бывают ли признаки боли (стоны, изгибание)? : {user_data['eight']}
    - Были ли изменения в рационе за последнюю неделю?: {user_data['nine']}
    - Меняется ли вес грызуна?: {user_data['ten']}
    Цель: выявить потенциальные проблемы с ЖКТ, зубами или рационом.
    Ответ должен быть ТОЛЬКО в формате JSON, например:
      {{ "message": "Судя по предоставленным ответам, у питомца нет явных нарушений аппетита или пищеварения. Поведение при кормлении, стул и общее состояние соответствуют физиологической норме. Рекомендации:  Важно продолжать следить за регулярностью питания, качеством рациона и состоянием стула. Изменения в поедаемости, запахе фекалий или вздутии живота могут быть ранними признаками проблем с ЖКТ. Регулярная проверка по текущей анкете поможет вовремя отследить возможные отклонения."
      }}
    """

    response = openai.ChatCompletion.create(
        model=MODEL,
        messages=[
            {"role": "system", "content": "Ты эксперт в области здоровья и образа жизни.Это питомец не человек"},
            {"role": "user", "content": prompt}
        ],
        response_format={"type": "json_object"}
    )

    result_text = response["choices"][0]["message"]["content"]
    result_dict = json.loads(result_text)

    return result_dict